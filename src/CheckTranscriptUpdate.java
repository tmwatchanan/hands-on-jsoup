
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import org.jsoup.Connection;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.HttpClientBuilder;

import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.WebResource;
import lombok.Data;
import org.codehaus.jackson.map.ObjectMapper;
import javax.ws.rs.core.MediaType;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Watchanan
 */

class IFTTT {

	private static final String IFTTT_TRIGGER_ENDPOINT = "https://maker.ifttt.com/trigger/%s/with/key/%s";

	/**
	 * Trigger the IFTTT API.
	 * More details at https://maker.ifttt.com/use/<your api key here>
	 * @param event The unique event identifier you setup for the trigger
	 * @param key The app key generated by IFTTT
	 * @param values Up to three values you can pass to the API request
	 */
	public void trigger(String event, String key, Object ...values){
		Client client = Client.create();
		String resourceUrl = String.format(IFTTT_TRIGGER_ENDPOINT, event, key);
		WebResource webResource = client.resource(resourceUrl);
		IftttReq iftttReq = new IftttReq(values);
		webResource.type(MediaType.APPLICATION_JSON).post(iftttReq.toJson());
	}

	@Data private class IftttReq {
		private final String value1;
		private final String value2;
		private final String value3;

		public IftttReq(Object... values) {
			this.value1 = values.length > 0 ? String.valueOf(values[0]) : null;
			this.value2 = values.length > 1 ? String.valueOf(values[1]) : null;
			this.value3 = values.length > 2 ? String.valueOf(values[2]) : null;
		}

		public String toJson(){
			ObjectMapper mapper = new ObjectMapper();
			try {
				return mapper.writeValueAsString(this);
			} catch (IOException e) {
				e.printStackTrace();
				return null;
			}
		}
	}
}

public class CheckTranscriptUpdate {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        try {
            Connection conn = Jsoup.connect("https://www3.reg.cmu.ac.th/transcript/");
            Document doc = conn.get();

            String docTitle = doc.title();
            System.out.println(docTitle);
            Element updateAt = doc.select("#update-at").first();
            String updateAtMessage = updateAt.text();
            System.out.println(updateAtMessage);
            String targetUpdateAtMessage = "ข้อมูลอัพเดทเมื่อวันที่ 23 ธันวาคม 2560";
//            if (updateAtMessage == targetUpdateAtMessage) {
//                System.out.println(true);
//            }
            System.out.println(updateAtMessage.equals(targetUpdateAtMessage));
            if (updateAtMessage.equals(targetUpdateAtMessage)) {
                final String event = "transcript_update";
                final String key = "CENSOR";
                final String myValue1 = targetUpdateAtMessage;
                new IFTTT().trigger(event, key, myValue1);
            }

//            CAPTCHA
//            Element captcha = doc.select(".hashimg").first();
//            if (captcha == null) {
//                throw new RuntimeException("CAPTCHA not found!");
//            }
//            // Fetch the captcha image
//            Connection.Response response = Jsoup //
//                    .connect(captcha.absUrl("src")) // Extract image absolute URL
//                    .cookies(conn.response().cookies()) // Grab cookies
//                    .ignoreContentType(true) // Needed for fetching image
//                    .execute();
//            // Load captcha image from Jsoup response
//            ImageIcon image = new ImageIcon(ImageIO.read(new ByteArrayInputStream(response.bodyAsBytes())));
//            // Show captcha image
//            JOptionPane.showMessageDialog(null, image, "Captcha image", JOptionPane.PLAIN_MESSAGE);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
